{"version":3,"file":"static/js/964.99239e42.chunk.js","mappings":"0LAMQA,EAAYC,EAAAA,EAAAA,QAyJpB,UAvJgB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACtC,GAA+BC,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,KAChBC,GAAWC,EAAAA,EAAAA,IAAY,KACvBC,GAAWC,EAAAA,EAAAA,MAIjB,OAFAC,QAAQC,IAAIX,IAGV,gBACEY,UAAS,UAAKZ,EAAY,SAAW,OAA5B,6DADX,UAIE,UAAC,IAAD,CACEa,oBAAqB,CAAC,IAAML,EAASM,SAASC,MAAM,KAAK,IACzDC,gBAAiB,CAACR,EAASM,SAASC,MAAM,KAAK,IAC/CE,KAAK,SACLC,gBAAiBlB,EACjBY,UAAU,kBALZ,UAOGX,EAASkB,KAAI,SAACC,GACb,OAAIA,EAAKC,YAEL,SAACvB,EAAD,CAEEwB,KAAMF,EAAKE,KACXC,OAAO,cAAGX,UAAU,YAAb,SAA0BQ,EAAKI,OAHxC,SAKGJ,EAAKK,QAAQN,KAAI,SAACM,GACjB,OAAIA,EAAQJ,YAER,SAACvB,EAAD,CACEc,UAAU,kBAEVW,OAAO,cAAGX,UAAU,YAAb,SAA0Ba,EAAQD,OAH3C,SAKGC,EAAQA,QAAQN,KAAI,SAACO,GACpB,OAAIA,EAAWL,YAEX,SAACvB,EAAD,CACEc,UAAU,kBAEVW,OACE,cAAGX,UAAU,YAAb,SAA0Bc,EAAWF,OAJzC,SAOGE,EAAWD,QAAQN,KAAI,SAACQ,GAAD,OACtB,SAAC,SAAD,CAEEf,UAAU,YACVgB,QAAS,kBAAMtB,EAASqB,EAAcE,OAHxC,SAKGF,EAAcH,MAJVG,EAAcG,QAPlBJ,EAAWI,KAkBlB,SAAC,SAAD,CAEElB,UAAU,YACVgB,QAAS,kBAAMtB,EAASoB,EAAWG,OAHrC,SAKGH,EAAWF,MAJPE,EAAWI,QA3BnBL,EAAQK,KAwCf,SAAC,SAAD,CAEEF,QAAS,kBAAMtB,EAASmB,EAAQI,OAChCjB,UAAU,YAHZ,SAKGa,EAAQD,MAJJC,EAAQK,QAlDhBV,EAAKU,KA+DZ,SAAC,SAAD,CAEER,KAAMF,EAAKE,KACXV,UAAU,8BAHZ,UAKE,SAAC,KAAD,CAAMmB,GAAIX,EAAKS,KAAf,UACE,iBAAMjB,UAAU,0BAAhB,SAA2CQ,EAAKI,UAL7CJ,EAAKU,QAWlB,SAAChC,EAAD,CACEc,UAAS,wCAAmCZ,EAAY,OAAS,aAEjEsB,MACE,SAAC,MAAD,CAAeU,KAAM,KAGvBT,OACE,iBAAKX,UAAU,gCAAf,WACE,iBAAMA,UAAU,mBAAhB,SAAoCV,EAAMsB,QAC1C,iBAAMZ,UAAU,oCAAhB,SAAqDP,EAAK4B,KAAKC,KAAKC,mBAV1E,SAcGjC,EAAMmB,YACLnB,EAAMuB,QAAQN,KAAI,SAACM,GACjB,MAAqB,KAAjBA,EAAQI,MAER,SAAC,SAAD,CAEED,QAAS,kBACPxB,EAAa,CAAEgC,KAAMC,EAAAA,IAAU/B,EAAS,YAE1CM,UAAS,oBAAeZ,EAAY,UAAY,QAAvC,oBALX,UAQE,iBAAMY,UAAU,kBAAhB,SAAmCa,EAAQD,QAPtCC,EAAQK,IAWVL,EAAQa,YAAmC,gBAApBjC,EAAK4B,KAAKC,KACjC,MAIL,SAAC,SAAD,CAEEtB,UAAS,oBAAeZ,EAAY,UAAY,QAAvC,oBAFX,UAKE,SAAC,KAAD,CAAM+B,GAAIN,EAAQI,KAAMjB,UAAU,kBAAlC,SACGa,EAAQD,QALNC,EAAQK,QA9BlB5B,EAAM4B","sources":["components/Sidebar/Index.jsx"],"sourcesContent":["import { Menu } from \"antd\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useGlobalContext } from \"../../context/GlobalContextProvider\";\nimport { LOGOUT } from \"../../context/constants/AuthConstants\";\nimport { AiOutlineUser } from 'react-icons/ai'\n\nconst { SubMenu } = Menu;\n\nconst SideBar = ({ collapsed, menulist, admin }) => {\n  const { authDispatch, auth } = useGlobalContext();\n  const navigate = useNavigate(\"/\");\n  const location = useLocation();\n\n  console.log(collapsed)\n\n  return (\n    <div\n      className={`${collapsed ? \"w-auto\" : \"w-72\"\n        } normal-transition h-screen border-r dark:border-gray-700`}\n    >\n      <Menu\n        defaultSelectedKeys={[\"/\" + location.pathname.split(\"/\")[1]]}\n        defaultOpenKeys={[location.pathname.split(\"/\")[1]]}\n        mode=\"inline\"\n        inlineCollapsed={collapsed}\n        className=\"h-full relative\"\n      >\n        {menulist.map((menu) => {\n          if (menu.hasSubMenu) {\n            return (\n              <SubMenu\n                key={menu.id}\n                icon={menu.icon}\n                title={<p className=\"text-base\">{menu.name}</p>}\n              >\n                {menu.subMenu.map((subMenu) => {\n                  if (subMenu.hasSubMenu) {\n                    return (\n                      <SubMenu\n                        className=\"dark:text-white\"\n                        key={subMenu.id}\n                        title={<p className=\"text-base\">{subMenu.name}</p>}\n                      >\n                        {subMenu.subMenu.map((subSubMenu) => {\n                          if (subSubMenu.hasSubMenu) {\n                            return (\n                              <SubMenu\n                                className=\"dark:text-white\"\n                                key={subSubMenu.id}\n                                title={\n                                  <p className=\"text-base\">{subSubMenu.name}</p>\n                                }\n                              >\n                                {subSubMenu.subMenu.map((subSubSubMenu) => (\n                                  <Menu.Item\n                                    key={subSubSubMenu.id}\n                                    className=\"text-base\"\n                                    onClick={() => navigate(subSubSubMenu.link)}\n                                  >\n                                    {subSubSubMenu.name}\n                                  </Menu.Item>\n                                ))}\n                              </SubMenu>\n                            );\n                          } else {\n                            return (\n                              <Menu.Item\n                                key={subSubMenu.id}\n                                className=\"text-base\"\n                                onClick={() => navigate(subSubMenu.link)}\n                              >\n                                {subSubMenu.name}\n                              </Menu.Item>\n                            );\n                          }\n                        })}\n                      </SubMenu>\n                    );\n                  } else {\n                    return (\n                      <Menu.Item\n                        key={subMenu.id}\n                        onClick={() => navigate(subMenu.link)}\n                        className=\"text-base\"\n                      >\n                        {subMenu.name}\n                      </Menu.Item>\n                    );\n                  }\n                })}\n              </SubMenu>\n            );\n          } else {\n            return (\n              <Menu.Item\n                key={menu.id}\n                icon={menu.icon}\n                className=\"border-r border-transparent\"\n              >\n                <Link to={menu.link}>\n                  <span className=\"text-lg dark:text-white\">{menu.name}</span>\n                </Link>\n              </Menu.Item>\n            );\n          }\n        })}\n        <SubMenu\n          className={`absolute bottom-[65px] w-full ${collapsed ? \"py-0\" : \"pt-2 pb-4\"\n            }`}\n          icon={\n            <AiOutlineUser size={28} />\n          }\n          key={admin.id}\n          title={\n            <div className=\"flex flex-col dark:text-white\">\n              <span className=\"text-sm truncate\">{admin.name}</span>\n              <span className=\"text-xs text-purple-500 font-bold\">{auth.user.role.toUpperCase()}</span>\n            </div>\n          }\n        >\n          {admin.hasSubMenu &&\n            admin.subMenu.map((subMenu) => {\n              if (subMenu.link === \"\") {\n                return (\n                  <Menu.Item\n                    key={subMenu.id}\n                    onClick={() =>\n                      authDispatch({ type: LOGOUT }, navigate(\"/login\"))\n                    }\n                    className={`text-base ${collapsed ? \"pl-auto\" : \"pl-16\"\n                      } dark:text-white`}\n                  >\n                    <span className=\"dark:text-white\">{subMenu.name}</span>\n                  </Menu.Item>\n                );\n              }\n              else if (subMenu.superAdmin && !auth.user.role === (\"superAdmin\")) {\n                return null;\n              }\n              else {\n                return (\n                  <Menu.Item\n                    key={subMenu.id}\n                    className={`text-base ${collapsed ? \"pl-auto\" : \"pl-16\"\n                      } dark:text-white`}\n                  >\n                    <Link to={subMenu.link} className=\"dark:text-white\">\n                      {subMenu.name}\n                    </Link>\n                  </Menu.Item>\n                );\n              }\n            })}\n        </SubMenu>\n      </Menu>\n    </div>\n  );\n};\n\nexport default SideBar;\n"],"names":["SubMenu","Menu","collapsed","menulist","admin","useGlobalContext","authDispatch","auth","navigate","useNavigate","location","useLocation","console","log","className","defaultSelectedKeys","pathname","split","defaultOpenKeys","mode","inlineCollapsed","map","menu","hasSubMenu","icon","title","name","subMenu","subSubMenu","subSubSubMenu","onClick","link","id","to","size","user","role","toUpperCase","type","LOGOUT","superAdmin"],"sourceRoot":""}