{"version":3,"file":"static/js/642.5d37bcb5.chunk.js","mappings":"oMAmBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OACXC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP,K,SCwBL,EAlDe,SAAC,GAAkD,IAAhDG,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAC7C,OACE,mBAAQC,UAAU,4IAAlB,UACE,iBAAKA,UAAU,gDAAf,WACE,gBAAKA,UAAU,kGAAf,UACE,mBACEC,QAAS,WACPJ,GAAgBC,IAElBE,UAAU,iOAJZ,SAMGF,GACC,SAAC,MAAD,CAAkBE,UAAU,kFAE5B,SAAC,MAAD,CAAgBA,UAAU,sFAIhC,gBAAKA,UAAU,gBAAf,UACE,gBAAKA,UAAU,oCAAf,SACGD,EAAYG,KAAI,SAACC,EAAOC,GACvB,OAAID,EAAME,QAAUD,IAAUL,EAAYO,QAEtC,iBAAoBN,UAAU,oBAA9B,WACE,SAAC,KAAD,CAAMO,GAAIJ,EAAMK,KAAhB,UACE,cAAGR,UAAU,YAAb,SAA0BG,EAAMM,UAElC,kBAAMT,UAAU,cAAhB,UACG,KACD,SAAC,MAAD,IAAoB,SANdb,MAYZ,cAAkBa,UAAU,YAA5B,SACGG,EAAMM,MADDtB,aAOhB,gBAAKa,UAAU,oBAAf,UACE,SAAC,IAAD,CAAiBA,UAAU","sources":["../node_modules/nanoid/index.browser.js","components/Header/Index.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { FiChevronsRight } from \"react-icons/fi\";\nimport { RiMenuFoldLine, RiMenuUnfoldLine } from \"react-icons/ri\";\nimport { Link } from \"react-router-dom\";\nimport DarkModeToggler from \"../DarkModeToggler/Index\";\nimport { nanoid } from \"nanoid\";\n\nconst Header = ({ setShowSidebar, showSidebar, breadcrumbs }) => {\n  return (\n    <header className=\"normal-transition sticky top-0 z-20 h-16 min-w-full border-b border-b-gray-300 bg-gray-100 py-2.5 dark:border-b-gray-900 dark:bg-gray-900\">\n      <div className=\"mx-5 flex h-full items-center justify-between\">\n        <div className=\"normal-transition font-nunito purple-text flex w-auto items-center py-0 text-2xl font-extrabold\">\n          <button\n            onClick={() => {\n              setShowSidebar(!showSidebar);\n            }}\n            className=\"absolute flex justify-center items-center rounded-full top-1/2 left-3 -translate-y-1/2 scale-100 cursor-pointer p-2 active:scale-90 bg-transparent hover:bg-gray-300 dark:bg-transparent hover:dark:bg-black normal-transition\"\n          >\n            {showSidebar ? (\n              <RiMenuUnfoldLine className=\"normal-transition text-2xl text-black active:rotate-[360deg] dark:text-white\" />\n            ) : (\n              <RiMenuFoldLine className=\"normal-transition text-2xl text-black active:rotate-[360deg] dark:text-white\" />\n            )}\n          </button>\n        </div>\n        <div className=\"mr-auto ml-10\">\n          <div className=\"flex items-center dark:text-white\">\n            {breadcrumbs.map((crumb, index) => {\n              if (crumb.isLink && index !== breadcrumbs.length) {\n                return (\n                  <div key={nanoid()} className=\"flex items-center\">\n                    <Link to={crumb.link}>\n                      <p className=\"text-base\">{crumb.name}</p>\n                    </Link>\n                    <span className=\"mx-1 mt-1.5\">\n                      {\" \"}\n                      <FiChevronsRight />{\" \"}\n                    </span>\n                  </div>\n                );\n              }\n              return (\n                <p key={nanoid()} className=\"text-base\">\n                  {crumb.name}\n                </p>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"flex items-center\">\n          <DarkModeToggler className=\"mr-auto\" />\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","setShowSidebar","showSidebar","breadcrumbs","className","onClick","map","crumb","index","isLink","length","to","link","name"],"sourceRoot":""}