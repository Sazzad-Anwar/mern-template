{"version":3,"file":"static/js/946.720c9d81.chunk.js","mappings":"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","sources":["pages/Users/Create.jsx"],"sourcesContent":["import { Button, DatePicker, Form, Input, Radio, Select } from \"antd\";\nimport React, { useId } from \"react\";\nimport { FiKey } from \"react-icons/fi\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport useSWR from \"swr\";\nimport BreadCrumbs from \"../../components/BreadCrumbs/Index\";\nimport { LOGOUT } from \"../../context/constants/AuthConstants\";\nimport { useGlobalContext } from \"../../context/GlobalContextProvider\";\nimport axiosInstance from \"../../utils/AxiosInstance\";\nimport Fetcher from \"../../utils/Fetcher\";\n\nexport default function Create() {\n  const { authDispatch } = useGlobalContext();\n  const navigate = useNavigate();\n  const { data: roleArray } = useSWR(\"/roles\", Fetcher);\n  const { data: divisionArray } = useSWR(\"/locations\", Fetcher);\n\n  let roles = roleArray && roleArray.data;\n  let divisions = divisionArray && divisionArray.data;\n\n  let breadcrumbs = [\n    {\n      isLink: true,\n      link: \"/\",\n      name: \"Home\",\n    },\n    {\n      isLink: true,\n      link: \"/users\",\n      name: \"Users\",\n    },\n    {\n      isLink: false,\n      link: \"\",\n      name: \"Create User\",\n    },\n  ];\n\n  const saveUserDetails = async (values) => {\n    try {\n      await axiosInstance.post(\"/auth/registration\", values);\n      toast.success(\"User created successfully!\");\n      authDispatch({ type: LOGOUT });\n      navigate(\"/login\");\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  return (\n    <>\n      <BreadCrumbs details={breadcrumbs} />\n      <div className=\"py-5\">\n        <div className=\"w-96 mx-auto\">\n          <Form\n            name=\"user-details\"\n            layout=\"vertical\"\n            className=\"ml-5 grid grid-cols-1 gap-2\"\n            onFinish={saveUserDetails}\n          >\n            <Form.Item\n              label={<span className=\"text-lg dark:text-white\">Name</span>}\n              name=\"name\"\n              rules={[{ required: true, message: \"Please input your name!\" }]}\n            >\n              <Input size=\"large\" placeholder=\"Name\" />\n            </Form.Item>\n\n            <Form.Item\n              label={<span className=\"text-lg dark:text-white\">Email</span>}\n              name=\"email\"\n              rules={[{ required: true, message: \"Please input your email!\" }]}\n            >\n              <Input type={\"email\"} size=\"large\" placeholder=\"Email\" />\n            </Form.Item>\n\n            <Form.Item\n              label={\n                <span className=\"text-lg dark:text-white\">Phone Number</span>\n              }\n              name=\"phoneNumber\"\n              rules={[\n                { required: true, message: \"Please input phone number!\" },\n              ]}\n            >\n              <Input type={\"tel\"} size=\"large\" placeholder=\"Phone\" />\n            </Form.Item>\n\n            <Form.Item\n              label={\n                <span className=\"text-lg dark:text-white\">\n                  Select Date of Birth\n                </span>\n              }\n              name=\"dateOfBirth\"\n              rules={[\n                { required: true, message: \"Please input date of birth!\" },\n              ]}\n            >\n              <DatePicker size=\"large\" className=\"w-full\" />\n            </Form.Item>\n\n            <Form.Item\n              name=\"location\"\n              label={\n                <label className=\"dark:text-white text-lg\">\n                  Select Division\n                </label>\n              }\n            >\n              <Select\n                value={divisions}\n                allowClear\n                placeholder=\"Select a division\"\n                size=\"large\"\n                showSearch\n                filterOption={(input, option) =>\n                  option.children.includes(input)\n                }\n                filterSort={(optionA, optionB) =>\n                  optionA.children\n                    .toLowerCase()\n                    .localeCompare(optionB.children.toLowerCase())\n                }\n              >\n                {divisions?.map((division) => (\n                  <Select.Option key={useId} value={division.name}>\n                    {division.name}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n\n            <Form.Item\n              label={\n                <h1 className=\"text-lg font-semibold dark:text-white\">\n                  Password\n                </h1>\n              }\n              name=\"password\"\n              dependencies={[\"confirmPassword\"]}\n              hasFeedback\n              className=\"w-full\"\n              rules={[\n                { required: true, message: \"Please input your password!\" },\n                ({ getFieldValue }) => ({\n                  validator(_, value) {\n                    if (!value || getFieldValue(\"confirmPassword\") === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\n                      new Error(\n                        \"The two passwords that you entered do not match!\"\n                      )\n                    );\n                  },\n                }),\n              ]}\n            >\n              <Input.Password\n                type=\"password\"\n                size=\"large\"\n                prefix={<FiKey size={25} />}\n                placeholder=\"Password\"\n              />\n            </Form.Item>\n\n            <Form.Item\n              label={\n                <h1 className=\"text-lg font-semibold dark:text-white\">\n                  Confirm Password\n                </h1>\n              }\n              dependencies={[\"password\"]}\n              hasFeedback\n              name=\"confirmPassword\"\n              className=\"w-full\"\n              rules={[\n                { required: true, message: \"Please input your password!\" },\n                ({ getFieldValue }) => ({\n                  validator(_, value) {\n                    if (!value || getFieldValue(\"password\") === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\n                      new Error(\n                        \"The two passwords that you entered do not match!\"\n                      )\n                    );\n                  },\n                }),\n              ]}\n            >\n              <Input.Password\n                type=\"password\"\n                size=\"large\"\n                prefix={<FiKey size={25} />}\n                placeholder=\"Password\"\n              />\n            </Form.Item>\n\n            <Form.Item\n              label={\n                <span className=\"text-lg dark:text-white\">User Status</span>\n              }\n              name=\"isActive\"\n              rules={[\n                { required: true, message: \"Please select user status!\" },\n              ]}\n            >\n              <Radio.Group>\n                <Radio value={true} className=\"dark:text-white\">\n                  Active\n                </Radio>\n                <Radio value={false} className=\"dark:text-white\">\n                  Inactive\n                </Radio>\n              </Radio.Group>\n            </Form.Item>\n\n            <Form.Item\n              label={<span className=\"text-lg dark:text-white\">Role</span>}\n              name=\"role\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please mark to at least one role!\",\n                },\n              ]}\n            >\n              <Radio.Group>\n                {roles &&\n                  roles?.map((role) => {\n                    if (role.role === \"superadmin\") {\n                      return null;\n                    } else {\n                      return (\n                        <Radio\n                          key={role._id}\n                          className=\"dark:text-white\"\n                          value={role.role}\n                        >\n                          {role.role.toUpperCase()}\n                        </Radio>\n                      );\n                    }\n                  })}\n              </Radio.Group>\n            </Form.Item>\n\n            <Form.Item>\n              <Button\n                htmlType=\"submit\"\n                size=\"large\"\n                className=\"w-full dark:text-white text-blue-600 hover:text-white\"\n                type=\"primary\"\n              >\n                Save\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["Create","authDispatch","useGlobalContext","navigate","useNavigate","roleArray","useSWR","Fetcher","data","divisionArray","roles","divisions","saveUserDetails","values","axiosInstance","toast","type","LOGOUT","message","details","isLink","link","name","className","layout","onFinish","label","rules","required","size","placeholder","value","allowClear","showSearch","filterOption","input","option","children","includes","filterSort","optionA","optionB","toLowerCase","localeCompare","map","division","useId","dependencies","hasFeedback","getFieldValue","validator","_","Promise","reject","Error","resolve","prefix","role","toUpperCase","_id","htmlType"],"sourceRoot":""}