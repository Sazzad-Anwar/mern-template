{"version":3,"file":"static/js/271.1055d505.chunk.js","mappings":"wXAYe,SAASA,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACAE,GAASC,EAAAA,EAAAA,KAATD,KACME,GAAYC,EAAAA,EAAAA,IAAO,UAAD,OAAWL,GAAMM,EAAAA,GAAzCC,KACR,GAA0CF,EAAAA,EAAAA,IAAO,SAAUC,EAAAA,GAA7CE,EAAd,EAAQD,KAAoBE,EAA5B,EAAqBC,MACPC,GAAkBN,EAAAA,EAAAA,IAAO,yBAA0BC,EAAAA,GAAzDC,KAEJK,EAAYD,GAAiBA,EAAcJ,KAC3CM,EAAcT,GAAWA,EAAQG,KAEjCO,EAAc,CAChB,CACEC,QAAQ,EACRC,KAAM,IACNC,KAAM,QAER,CACEF,QAAQ,EACRC,KAAM,SACNC,KAAM,SAER,CACEF,QAAQ,EACRC,KAAM,GACNC,KAAMJ,GAA+B,cAAhBA,GAA+BA,EAAYI,OAI9DC,EAAe,mCAAG,WAAOC,GAAP,yFAEpBA,EAAOC,SAAP,UAAkBD,EAAOC,gBAAzB,QAAqCP,EAAYO,SACjDD,EAAOE,KAAP,UAAcF,EAAOE,YAArB,QAA6BR,EAAYQ,KAHrB,SAIdC,EAAAA,EAAAA,IAAA,iBAA4BtB,GAAMmB,GAJpB,OAKpBI,EAAAA,GAAAA,QAAc,uCACdC,EAAAA,EAAAA,IAAO,UAAD,OAAWxB,GAAMmB,GANH,gDAQpBI,EAAAA,GAAAA,MACE,KAAME,SAASlB,KAAKmB,QAChB,KAAMD,SAASlB,KAAKmB,QACpB,KAAMA,SAXQ,yDAAH,sDAkBrB,OACE,iCACE,SAAC,IAAD,CAAatB,QAASU,KACtB,gBAAKa,UAAU,OAAf,SACGd,GAA+B,cAAhBA,GACd,iBAAKc,UAAU,eAAf,WACE,gBAAKA,UAAU,mBAAf,UACE,SAAC,IAAD,CACEC,IAAKf,EAAYI,KACjBY,IAAKhB,EAAYiB,UACjBH,UAAU,qBACVI,KAAM,GAJR,SAMGlB,EAAYI,KAAKe,MAAM,IAAI,GAAGC,mBAGnC,UAAC,IAAD,CACEhB,KAAK,eACLiB,OAAO,WACPC,cAAe,CACblB,KAAMJ,EAAYI,KAClBmB,MAAOvB,EAAYuB,MACnBC,YAAaxB,EAAYwB,YACzBhB,KAAMR,EAAYQ,KAClBiB,YAC8B,KAA5BzB,EAAYyB,YACRC,GAAAA,CAAO1B,EAAYyB,aACnB,GACNE,SAAU3B,EAAY2B,SACtBpB,SAAUP,EAAYO,SACtBU,UAAWjB,EAAYiB,WAEzBH,UAAU,8BACVc,SAAUvB,EAjBZ,WAmBE,SAAC,SAAD,CACEwB,OAAO,iBAAMf,UAAU,0BAAhB,kBACPV,KAAK,OACL0B,MAAO,CAAC,CAAEC,UAAU,EAAMlB,QAAS,4BAHrC,UAKE,SAAC,IAAD,CAAOK,KAAK,aAGd,SAAC,SAAD,CACEW,OAAO,iBAAMf,UAAU,0BAAhB,mBACPV,KAAK,QACL0B,MAAO,CACL,CAAEC,UAAU,EAAMlB,QAAS,6BAJ/B,UAOE,SAAC,IAAD,CAAOmB,KAAM,QAASd,KAAK,aAG7B,SAAC,SAAD,CACEW,OACE,iBAAMf,UAAU,0BAAhB,0BAEFV,KAAK,cACL0B,MAAO,CACL,CAAEC,UAAU,EAAMlB,QAAS,+BAN/B,UASE,SAAC,IAAD,CAAOmB,KAAM,MAAOd,KAAK,aAG3B,SAAC,SAAD,CACEW,OACE,iBAAMf,UAAU,0BAAhB,kCAIFV,KAAK,cACL0B,MAAO,CACL,CAAEC,UAAU,EAAMlB,QAAS,gCAR/B,UAWE,SAAC,IAAD,CACEoB,OA/EG,aAgFHf,KAAK,QACLJ,UAAU,cAId,SAAC,SAAD,CACEV,KAAK,WACLyB,OACE,kBAAOf,UAAU,0BAAjB,6BAHJ,UAQE,SAAC,IAAD,CACEoB,MAAOnC,EACPoC,YAAU,EACVC,YAAU,EACVC,YAAY,oBACZnB,KAAK,QACLoB,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAASC,SAASH,IAE3BI,WAAY,SAACC,EAASC,GAAV,OACVD,EAAQH,SACLK,cACAC,cAAcF,EAAQJ,SAASK,gBAZtC,gBAeG/C,QAfH,IAeGA,OAfH,EAeGA,EAAWiD,KAAI,SAACC,GAAD,OACd,SAAC,WAAD,CAEEf,MAAOe,EAAS7C,KAFlB,SAIG6C,EAAS7C,MAHL6C,EAAS7C,KAAO,IAAM6C,EAASC,aAS5C,SAAC,SAAD,CACE9C,KAAK,YACLyB,OACE,kBAAOf,UAAU,0BAAjB,wBAHJ,UAME,SAAC,IAAD,CAAOI,KAAK,QAAQkB,YAAU,EAACC,YAAY,sBAGxB,gBAAhB,OAAJhD,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAK3C,QACV,iCACE,SAAC,SAAD,CACEqB,OACE,iBAAMf,UAAU,0BAAhB,yBAIFV,KAAK,WACL0B,MAAO,CACL,CAAEC,UAAU,EAAMlB,QAAS,+BAR/B,UAWE,UAAC,WAAD,YACE,SAAC,KAAD,CAAOqB,OAAO,EAAMpB,UAAU,kBAA9B,qBAGA,SAAC,KAAD,CAAOoB,OAAO,EAAOpB,UAAU,kBAA/B,6BAKH,OAAClB,QAAD,IAACA,GAAAA,EAAWiB,WACX,SAAC,SAAD,CACEgB,OACE,iBAAMf,UAAU,0BAAhB,kBAEFV,KAAK,OACL0B,MAAO,CACL,CACEC,UAAU,EACVlB,QAAS,sCARf,UAYE,SAAC,WAAD,UACGlB,IAAK,OACJA,QADI,IACJA,OADI,EACJA,EAAOD,KAAKsD,KAAI,SAACxC,GAIf,OACE,SAAC,KAAD,CAEEM,UAAU,kBACVsC,SACEpD,GACqB,eAArBA,EAAYQ,KAEd0B,MAAO1B,EAAKA,KAPd,SASGA,EAAKA,KAAKY,eARNZ,EAAK0C,iBAiB5B,SAAC,SAAD,WACE,SAAC,IAAD,CACEG,SAAS,SACTnC,KAAK,QACLJ,UAAU,SACVkB,KAAK,UACLoB,SACwB,gBAAX,OAAXpD,QAAW,IAAXA,OAAA,EAAAA,EAAaQ,OACO,gBAAhB,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAK3C,MAPf,2BAgBN,SAAC,IAAD","sources":["pages/Users/Details.jsx"],"sourcesContent":["import { Avatar, Button, DatePicker, Form, Input, Radio, Select } from \"antd\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport useSWR, { mutate } from \"swr\";\nimport axiosInstance from \"../../utils/AxiosInstance\";\nimport Fetcher from \"../../utils/Fetcher\";\nimport Loader from \"../../components/Loader/Index\";\nimport { useGlobalContext } from \"../../context/GlobalContextProvider\";\nimport BreadCrumbs from \"../../components/BreadCrumbs/Index\";\nimport moment from \"moment\";\n\nexport default function Details() {\n  const { id } = useParams();\n  const { auth } = useGlobalContext();\n  const { data: details } = useSWR(`/users/${id}`, Fetcher);\n  const { data: roles, error: roleError } = useSWR(\"/roles\", Fetcher);\n  const { data: divisionArray } = useSWR(\"/locations?q=divisions\", Fetcher);\n\n  let divisions = divisionArray && divisionArray.data;\n  let userDetails = details && details.data;\n\n  let breadcrumbs = [\n    {\n      isLink: true,\n      link: \"/\",\n      name: \"Home\",\n    },\n    {\n      isLink: true,\n      link: \"/users\",\n      name: \"Users\",\n    },\n    {\n      isLink: false,\n      link: \"\",\n      name: userDetails && userDetails !== \"undefined\" && userDetails.name,\n    },\n  ];\n\n  const saveUserDetails = async (values) => {\n    try {\n      values.isActive = values.isActive ?? userDetails.isActive;\n      values.role = values.role ?? userDetails.role;\n      await axiosInstance.put(`/users/${id}`, values);\n      toast.success(\"User details updated successfully!\");\n      mutate(`/users/${id}`, values);\n    } catch (error) {\n      toast.error(\n        error.response.data.message\n          ? error.response.data.message\n          : error.message\n      );\n    }\n  };\n\n  const dateFormat = \"YYYY/MM/DD\";\n\n  return (\n    <>\n      <BreadCrumbs details={breadcrumbs} />\n      <div className=\"py-5\">\n        {userDetails && userDetails !== \"undefined\" ? (\n          <div className=\"w-96 mx-auto\">\n            <div className=\"text-center mb-5\">\n              <Avatar\n                alt={userDetails.name}\n                src={userDetails.avatarUrl}\n                className=\"dark:text-gray-900\"\n                size={50}\n              >\n                {userDetails.name.split(\"\")[0].toUpperCase()}\n              </Avatar>\n            </div>\n            <Form\n              name=\"user-details\"\n              layout=\"vertical\"\n              initialValues={{\n                name: userDetails.name,\n                email: userDetails.email,\n                phoneNumber: userDetails.phoneNumber,\n                role: userDetails.role,\n                dateOfBirth:\n                  userDetails.dateOfBirth !== \"\"\n                    ? moment(userDetails.dateOfBirth)\n                    : \"\",\n                location: userDetails.location,\n                isActive: userDetails.isActive,\n                avatarUrl: userDetails.avatarUrl,\n              }}\n              className=\"ml-5 grid grid-cols-1 gap-2\"\n              onFinish={saveUserDetails}\n            >\n              <Form.Item\n                label={<span className=\"text-lg dark:text-white\">Name</span>}\n                name=\"name\"\n                rules={[{ required: true, message: \"Please input your name!\" }]}\n              >\n                <Input size=\"large\" />\n              </Form.Item>\n\n              <Form.Item\n                label={<span className=\"text-lg dark:text-white\">Email</span>}\n                name=\"email\"\n                rules={[\n                  { required: true, message: \"Please input your email!\" },\n                ]}\n              >\n                <Input type={\"email\"} size=\"large\" />\n              </Form.Item>\n\n              <Form.Item\n                label={\n                  <span className=\"text-lg dark:text-white\">Phone Number</span>\n                }\n                name=\"phoneNumber\"\n                rules={[\n                  { required: true, message: \"Please input phone number!\" },\n                ]}\n              >\n                <Input type={\"tel\"} size=\"large\" />\n              </Form.Item>\n\n              <Form.Item\n                label={\n                  <span className=\"text-lg dark:text-white\">\n                    Select Date of Birth\n                  </span>\n                }\n                name=\"dateOfBirth\"\n                rules={[\n                  { required: true, message: \"Please input date of birth!\" },\n                ]}\n              >\n                <DatePicker\n                  format={dateFormat}\n                  size=\"large\"\n                  className=\"w-full\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"location\"\n                label={\n                  <label className=\"dark:text-white text-lg\">\n                    Select Division\n                  </label>\n                }\n              >\n                <Select\n                  value={divisions}\n                  showSearch\n                  allowClear\n                  placeholder=\"Select a division\"\n                  size=\"large\"\n                  filterOption={(input, option) =>\n                    option.children.includes(input)\n                  }\n                  filterSort={(optionA, optionB) =>\n                    optionA.children\n                      .toLowerCase()\n                      .localeCompare(optionB.children.toLowerCase())\n                  }\n                >\n                  {divisions?.map((division) => (\n                    <Select.Option\n                      key={division.name + \"-\" + division._id}\n                      value={division.name}\n                    >\n                      {division.name}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n\n              <Form.Item\n                name=\"avatarUrl\"\n                label={\n                  <label className=\"dark:text-white text-lg\">Avatar Url</label>\n                }\n              >\n                <Input size=\"large\" allowClear placeholder=\"Enter image url\" />\n              </Form.Item>\n\n              {auth?.user.role === \"superadmin\" && (\n                <>\n                  <Form.Item\n                    label={\n                      <span className=\"text-lg dark:text-white\">\n                        User Status\n                      </span>\n                    }\n                    name=\"isActive\"\n                    rules={[\n                      { required: true, message: \"Please select user status!\" },\n                    ]}\n                  >\n                    <Radio.Group>\n                      <Radio value={true} className=\"dark:text-white\">\n                        Active\n                      </Radio>\n                      <Radio value={false} className=\"dark:text-white\">\n                        Inactive\n                      </Radio>\n                    </Radio.Group>\n                  </Form.Item>\n                  {!roleError?.message && (\n                    <Form.Item\n                      label={\n                        <span className=\"text-lg dark:text-white\">Role</span>\n                      }\n                      name=\"role\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please mark to at least one role!\",\n                        },\n                      ]}\n                    >\n                      <Radio.Group>\n                        {roles &&\n                          roles?.data.map((role) => {\n                            // if (role.role === 'superAdmin') {\n                            //   return null;\n                            // }\n                            return (\n                              <Radio\n                                key={role._id}\n                                className=\"dark:text-white\"\n                                disabled={\n                                  userDetails &&\n                                  userDetails.role === \"superadmin\"\n                                }\n                                value={role.role}\n                              >\n                                {role.role.toUpperCase()}\n                              </Radio>\n                            );\n                          })}\n                      </Radio.Group>\n                    </Form.Item>\n                  )}\n                </>\n              )}\n              <Form.Item>\n                <Button\n                  htmlType=\"submit\"\n                  size=\"large\"\n                  className=\"w-full\"\n                  type=\"primary\"\n                  disabled={\n                    userDetails?.role === \"superadmin\" &&\n                    auth?.user.role !== \"superadmin\"\n                  }\n                >\n                  Save\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        ) : (\n          <Loader />\n        )}\n      </div>\n    </>\n  );\n}\n"],"names":["Details","id","useParams","auth","useGlobalContext","details","useSWR","Fetcher","data","roles","roleError","error","divisionArray","divisions","userDetails","breadcrumbs","isLink","link","name","saveUserDetails","values","isActive","role","axiosInstance","toast","mutate","response","message","className","alt","src","avatarUrl","size","split","toUpperCase","layout","initialValues","email","phoneNumber","dateOfBirth","moment","location","onFinish","label","rules","required","type","format","value","showSearch","allowClear","placeholder","filterOption","input","option","children","includes","filterSort","optionA","optionB","toLowerCase","localeCompare","map","division","_id","user","disabled","htmlType"],"sourceRoot":""}